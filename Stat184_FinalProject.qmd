---
title: "Stat184_FinalProject"
format: pdf
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
---
title: "stat184 proj"
format: html
editor: visual
---

#Google R style library(ggplot2) library(dplyr) library(knitr) library(tidyr)

# Load datasets

file1 \<- "C:\\Users\\alfre\\Downloads\\Data for Stat184 - Sheet1.csv" file2 \<- "C:\\Users\\alfre\\Downloads\\Data2 for Stat184 - Sheet1 (1).csv"

data1 \<- read.csv(file1) data2 \<- read.csv(file2)



```{r}
data_sheet_1_NEW <- data_sheet_1 

colnames(data_sheet_1_NEW) <- gsub(" ", "_", colnames(data_sheet_1_NEW))

data_sheet_1_NEW <- data_sheet_1_NEW %>%
  mutate(
    Synthetic_Rate = Synthetic / 555,
    Natural_Rate = Natural / 725
  ) %>%
  select(Injury_Outcome, Synthetic_Rate, Natural_Rate)

data_long <- data_sheet_1_NEW %>%
  pivot_longer(
    cols = c(Synthetic_Rate, Natural_Rate),
    names_to = "Surface",
    values_to = "Injuries_Per_Game"
  )
```



# Filter for lower extremity and knee, ankle, foot injuries

```{r}
# Filter for lower extremity and knee, ankle, foot injuries
data_sheet_1 <- data_sheet_1 %>%
  filter(Injury_Outcome %in% c("Any Time Loss", ">=8 days"))

ggplot(data_sheet_1, aes(x = Injury_Outcome, y = Injuries_Per_Game, fill = Surface)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ Injury_Outcome, scales = "free_x") +
  labs(
    x = "Injury Outcome",
    y = "Injury Rate per Game",
    fill = "Surface Type"
  ) +
  theme_minimal()
acl_data <- data_sheet_2[2:5,]

colnames(acl_data) <- gsub(" ", "_", colnames(acl_data))
acl_data <- acl_data %>%
  #filter(Injury.Type == "ACL Tear") %>%
  pivot_longer(cols = c(Natural_Grass, Artificial_Turf),
               names_to = "Surface", values_to = "Count")
```


# Create the bar chart

```{r}
ggplot(acl_data, aes(x = Injury_Type, y = Count, fill = Surface)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Contact Type", y = "Number of ACL Tears", title = "ACL Tear Comparison by Contact Type") +
  theme_minimal() +
  theme(plot.margin = margin(5,5,5,5))

```

ggplot(acl_data, aes(x = Injury.Type, y = Count, fill = Surface)) + geom_bar(stat = "identity", position = "dodge") + labs(x = "Contact Type", y = "Number of ACL Tears", title = "ACL Tear Comparison by Contact Type") + theme_minimal() + theme(plot.margin = margin(5,5,5,5))

#box and whisker plot

```{r}
boxplot(acl_data$Count)
```

# summary table for injury type

```{r}
acl_data_sum <- acl_data%>%
group_by(Injury_Type) %>%
  summarise(count = n(),across(Count, list(min = min, Quint1 = ~ quantile(., probs = 0.2), median = median,
                                        Quint2 = ~ quantile(., probs = 0.4), Quint3 = ~ quantile(., probs = 0.6),
                                        Quint4 = ~ quantile(., probs = 0.8),max=max,mean=mean, sd = sd)))
```

#summary table for surface type

```{r}
acl_data_sum_2 <- acl_data%>%
group_by(Surface) %>%
  summarise(count = n(),across(Count, list(min = min, Quint1 = ~ quantile(., probs = 0.2), median = median,
                                        Quint2 = ~ quantile(., probs = 0.4), Quint3 = ~ quantile(., probs = 0.6),
                                        Quint4 = ~ quantile(., probs = 0.8),max=max,mean=mean, sd = sd)))
```

# qq plot

```{r}
model <- lm(Synthetic_Rate ~ Natural_Rate, data = data_sheet_1_filt)
residuals <- resid(model)
qqnorm(residuals)
qqline(residuals, col = "red")

```

# fitted model

```{r}
model<-lm(Synthetic_Rate ~ Natural_Rate, data=data_sheet_1_filt)
res<-resid(model)
plot(fitted(model), res)
abline(0,0)
```

#dotplot for synthetic injury outcome
```{r}
ggplot(data_sheet_1_filt_NEW, aes(x = Injury_Outcome, y = Synthetic_Rate)) +
  geom_point(size = 3, color = "blue") +
  labs(x = "Injury Outcome", y = "Synthetic Rate of injury", title = "Dotplot of injury outcome vs synthetic turf") +
  theme_minimal()
```
#dotplot for natural grass injury outcome 
```{r}
ggplot(data_sheet_1_filt_NEW, aes(x = Injury_Outcome, y = Natural_Rate)) +
  geom_point(size = 3, color = "blue") +
  labs(x = "Injury Outcome", y = "Natural Rate of injury", title = "Dotplot of injury outcome vs natural grass") +
  theme_minimal()
```

#removing excess data from dataset(s)
```{r}
data_sheet_1_filt <- data_sheet_1_NEW %>% filter(Injury_Outcome != "Plays")
print(data_sheet_1_filt)
```

```{r}
data_sheet_1_filt_NEW <- data_sheet_1_filt %>% filter(Injury_Outcome != "Games")
print(data_sheet_1_filt_NEW)
```





